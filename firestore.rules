rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function hasRequiredUserFields() {
      return request.resource.data.keys().hasAll(['email', 'createdAt', 'updatedAt']) &&
        request.resource.data.email is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }
    
    function hasRequiredRecipeFields() {
      return request.resource.data.keys().hasAll(['title', 'ingredients', 'nutrition', 'createdAt', 'updatedAt', 'userId']) &&
        request.resource.data.title is string &&
        request.resource.data.ingredients is list &&
        request.resource.data.nutrition is map &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.userId is string;
    }
    
    function hasRequiredMealPlanFields() {
      return request.resource.data.keys().hasAll(['userId', 'weekStartDate', 'meals', 'createdAt', 'updatedAt']) &&
        request.resource.data.userId is string &&
        request.resource.data.weekStartDate is timestamp &&
        request.resource.data.meals is map &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }
    
    function hasRequiredGlucoseReadingFields() {
      return request.resource.data.keys().hasAll(['userId', 'value', 'timestamp', 'createdAt']) &&
        request.resource.data.userId is string &&
        request.resource.data.value is number &&
        request.resource.data.value >= 0 &&
        request.resource.data.value <= 600 &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.createdAt is timestamp;
    }
    
    function hasRequiredNutritionLogFields() {
      return request.resource.data.keys().hasAll(['userId', 'date', 'meals', 'totals', 'createdAt', 'updatedAt']) &&
        request.resource.data.userId is string &&
        request.resource.data.date is string &&
        request.resource.data.meals is list &&
        request.resource.data.totals is map &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && hasRequiredUserFields();
      allow update: if isOwner(userId) && hasRequiredUserFields() &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if false; // Users cannot delete their accounts through Firestore
    }
    
    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if isAuthenticated() && 
        (resource.data.isPublic == true || resource.data.userId == request.auth.uid);
      allow create: if isValidUser() && hasRequiredRecipeFields() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && hasRequiredRecipeFields() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isValidUser() && resource.data.userId == request.auth.uid;
    }
    
    // Meal Plans collection
    match /mealPlans/{planId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isValidUser() && hasRequiredMealPlanFields() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && hasRequiredMealPlanFields() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isValidUser() && resource.data.userId == request.auth.uid;
    }
    
    // Glucose Readings collection
    match /glucoseReadings/{readingId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isValidUser() && hasRequiredGlucoseReadingFields() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && hasRequiredGlucoseReadingFields() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isValidUser() && resource.data.userId == request.auth.uid;
    }
    
    // Nutrition Logs collection
    match /nutritionLogs/{logId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isValidUser() && hasRequiredNutritionLogFields() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && hasRequiredNutritionLogFields() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isValidUser() && resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}